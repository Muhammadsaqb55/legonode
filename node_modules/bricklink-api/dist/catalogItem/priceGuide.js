"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PriceGuideOptions = exports.PriceGuide = exports.PriceDetail = void 0;
var _request = require("../request");
var _catalogItem = require("./catalogItem");
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
/**
 * Specific sale price details for a givent item.
 */
var PriceDetail = /*#__PURE__*/_createClass(
/**
 * Create a Price Detail instance.
 * @param {object} [data] Data returned from an API response.
 */
function PriceDetail(data) {
  _classCallCheck(this, PriceDetail);
  data = data || {};
  /** @type {number} */
  this.quantity = data.quantity || 0;
  /** @type {number} */
  this.unit_price = data.unit_price || 0;
  /** @type {string} */
  this.shipping_available = data.shipping_available || '';
  /** @type {string} */
  this.shipping_available = data.shipping_available || '';
  /** @type {string} */
  this.seller_country_code = data.seller_country_code || '';
  /** @type {string} */
  this.buyer_country_code = data.buyer_country_code || '';
  /** @type {Date|null} */
  this.date_ordered = data.date_ordered ? new Date(data.date_ordered) : null;
});
/**
 * Represents a Price Guide for a catalog item.
 */
exports.PriceDetail = PriceDetail;
var PriceGuide = /*#__PURE__*/function () {
  /**
   * Create a new instance of a price guide.
   * @param {object} [data] Data returned from an API response.
   */
  function PriceGuide(data) {
    _classCallCheck(this, PriceGuide);
    /** 
     * item The item that belongs to the price guide.
     * @type {CatalogItem}
     */
    this.item = data.item ? new _catalogItem.CatalogItem(data.item) : new _catalogItem.CatalogItem();
    /** 
     * new_or_used Whether or not the price guide is new or used condition. 
     * @type {string}
     */
    this.new_or_used = data.new_or_used || '';
    /** @type {string} */
    this.currency_code = data.currency_code || '';
    /** @type {number} */
    this.min_price = data.min_price || 0;
    /** @type {number} */
    this.max_price = data.max_price || 0;
    /** @type {number} */
    this.avg_price = data.avg_price || 0;
    /** @type {number} */
    this.qty_avg_price = data.qty_avg_price || 0;
    /** @type {number} */
    this.unit_quantity = data.unit_quantity || 0;
    /** @type {number} */
    this.total_quantity = data.total_quantity || 0;
    /** @type {PriceDetail[]} */
    this.price_detail = data.price_detail ? data.price_detail.map(function (detail) {
      return new PriceDetail(detail);
    }) : [];
  }

  /**
   * Method to get a known catalog item's price guide
   *
   * Usage:
   *
   * ```
   * var req = PriceGuide.get(ItemType.Part, '3001', {new_or_used: Condition.Used});
   * client.send(req).then(guide => console.log(guide));
   * ```
   *
   * @param {string} itemType Catalog item type as found at {@link ItemType}.
   * @param {string} itemNumber Catalog item number
   * @param {object} [params] Params as outlined in {@link PriceGuideOptions}.
   * @return {BricklinkRequest} A request that is ready to execute with a client.
   */
  _createClass(PriceGuide, null, [{
    key: "get",
    value: function get(itemType, itemNumber, params) {
      params = params ? new PriceGuideOptions(params) : new PriceGuideOptions();
      var method = _request.BricklinkRequest.GET;
      var uri = "items/".concat(itemType, "/").concat(itemNumber, "/price");
      return new _request.BricklinkRequest(method, uri, params, function (data) {
        return new PriceGuide(data);
      });
    }
  }]);
  return PriceGuide;
}();
/**
 * Price guide option request params.
 */
exports.PriceGuide = PriceGuide;
var PriceGuideOptions = /*#__PURE__*/function (_RequestParams) {
  _inherits(PriceGuideOptions, _RequestParams);
  var _super = _createSuper(PriceGuideOptions);
  /**
   * Create an instance of Price Guide options.
   * @param {object} [data] Optional parameter data.
   * @param {number|null} [data.color_id=null] The color Identification numbe of the item
   * @param {string} [data.guide_type='stock'] Indicates that which statistics to be provided. Options include "sold" and "stock"
   * @param {string} [data.new_or_used='N'] Indicates the condition of items that are included in the statistics. Acceptable values are: "N": new item (default) and "U": used item
   * @param {string|null} [data.country_code=null]
   * @param {string|null} [data.region=null]
   * @param {string|null} [data.currency_code=null]
   * @param {string} [data.vat='N']
   */
  function PriceGuideOptions(data) {
    var _this;
    _classCallCheck(this, PriceGuideOptions);
    _this = _super.call(this);
    data = data || {};
    /**
     * The color Identification numbe of the item 
     * @type {number|null}
     */
    _this.color_id = data.color_id || null;
    /**
     * Indicates that which statistics to be provided. Options include "sold" and "stock"
     * @type {string}
     */
    _this.guide_type = data.guide_type || 'stock';
    /** 
     * Indicates the condition of items that are included in the statistics. Acceptable values are: "N": new item (default) and "U": used item 
     * @type {string}
     */
    _this.new_or_used = data.new_or_used || 'N';
    /** @type {string|null} */
    _this.country_code = data.country_code || null;
    /** @type {string|null} */
    _this.region = data.region || null;
    /** @type {string|null} */
    _this.currency_code = data.currency_code || null;
    /** @type {string} */
    _this.vat = data.vat || 'N';
    return _this;
  }
  return _createClass(PriceGuideOptions);
}(_request.RequestParams);
exports.PriceGuideOptions = PriceGuideOptions;