/**
 * Specific sale price details for a givent item.
 */
export class PriceDetail {
    /**
     * Create a Price Detail instance.
     * @param {object} [data] Data returned from an API response.
     */
    constructor(data?: object);
    /** @type {number} */
    quantity: number;
    /** @type {number} */
    unit_price: number;
    /** @type {string} */
    shipping_available: string;
    /** @type {string} */
    seller_country_code: string;
    /** @type {string} */
    buyer_country_code: string;
    /** @type {Date|null} */
    date_ordered: Date | null;
}
/**
 * Represents a Price Guide for a catalog item.
 */
export class PriceGuide {
    /**
     * Method to get a known catalog item's price guide
     *
     * Usage:
     *
     * ```
     * var req = PriceGuide.get(ItemType.Part, '3001', {new_or_used: Condition.Used});
     * client.send(req).then(guide => console.log(guide));
     * ```
     *
     * @param {string} itemType Catalog item type as found at {@link ItemType}.
     * @param {string} itemNumber Catalog item number
     * @param {object} [params] Params as outlined in {@link PriceGuideOptions}.
     * @return {BricklinkRequest} A request that is ready to execute with a client.
     */
    static get(itemType: string, itemNumber: string, params?: object): BricklinkRequest;
    /**
     * Create a new instance of a price guide.
     * @param {object} [data] Data returned from an API response.
     */
    constructor(data?: object);
    /**
     * item The item that belongs to the price guide.
     * @type {CatalogItem}
     */
    item: CatalogItem;
    /**
     * new_or_used Whether or not the price guide is new or used condition.
     * @type {string}
     */
    new_or_used: string;
    /** @type {string} */
    currency_code: string;
    /** @type {number} */
    min_price: number;
    /** @type {number} */
    max_price: number;
    /** @type {number} */
    avg_price: number;
    /** @type {number} */
    qty_avg_price: number;
    /** @type {number} */
    unit_quantity: number;
    /** @type {number} */
    total_quantity: number;
    /** @type {PriceDetail[]} */
    price_detail: PriceDetail[];
}
/**
 * Price guide option request params.
 */
export class PriceGuideOptions extends RequestParams {
    /**
     * Create an instance of Price Guide options.
     * @param {object} [data] Optional parameter data.
     * @param {number|null} [data.color_id=null] The color Identification numbe of the item
     * @param {string} [data.guide_type='stock'] Indicates that which statistics to be provided. Options include "sold" and "stock"
     * @param {string} [data.new_or_used='N'] Indicates the condition of items that are included in the statistics. Acceptable values are: "N": new item (default) and "U": used item
     * @param {string|null} [data.country_code=null]
     * @param {string|null} [data.region=null]
     * @param {string|null} [data.currency_code=null]
     * @param {string} [data.vat='N']
     */
    constructor(data?: {
        color_id?: number | null;
        guide_type?: string;
        new_or_used?: string;
        country_code?: string | null;
        region?: string | null;
        currency_code?: string | null;
        vat?: string;
    });
    /**
     * The color Identification numbe of the item
     * @type {number|null}
     */
    color_id: number | null;
    /**
     * Indicates that which statistics to be provided. Options include "sold" and "stock"
     * @type {string}
     */
    guide_type: string;
    /**
     * Indicates the condition of items that are included in the statistics. Acceptable values are: "N": new item (default) and "U": used item
     * @type {string}
     */
    new_or_used: string;
    /** @type {string|null} */
    country_code: string | null;
    /** @type {string|null} */
    region: string | null;
    /** @type {string|null} */
    currency_code: string | null;
    /** @type {string} */
    vat: string;
}
import { CatalogItem } from "./catalogItem";
import { BricklinkRequest } from "../request";
import { RequestParams } from "../request";
