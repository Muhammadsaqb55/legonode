"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ItemImage = void 0;
var _request = require("../request");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * Represents an image for a specific color of a catalog item.
 */
var ItemImage = /*#__PURE__*/function () {
  /**
   * Create an instance of Item Image
   * @param {object} data The API response data
   * @param {number} [data.color_id=0] Color Id of the image.
   * @param {string} [data.thumbnail_url=''] The Url of the thumbnail image.
   * @param {string} [data.type=''] The type of catalog item as correspondeing to {@link ItemType}.
   * @param {string} [data.no=''] The catalog item's identification number.
   */
  function ItemImage(data) {
    _classCallCheck(this, ItemImage);
    data = data || {};
    /** @type {number} */
    this.color_id = data.color_id || 0;
    /** @type {string} */
    this.thumbnail_url = data.thumbnail_url || '';
    /** @type {string} */
    this.type = data.type || '';
    /** @type {string} */
    this.no = data.no || '';
  }

  /**
   * Method to get an image of a catalog item.
   *
   * Usage:
   *
   * ```
   * var req = ItemImage.get(ItemType.Part, '3001', 0);
   * client.send(req).then(image => console.log(image));
   * ```
   *
   * @param {string} itemType Catalog item type
   * @param {string} itemNumber Catalog item number
   * @param {number} colorId Catalog item's color id.
   */
  _createClass(ItemImage, null, [{
    key: "get",
    value: function get(itemType, itemNumber, colorId) {
      var method = _request.BricklinkRequest.GET;
      var uri = "/items/".concat(itemType, "/").concat(itemNumber, "/images/").concat(colorId);
      return new _request.BricklinkRequest(method, uri, null, function (data) {
        return new ItemImage(data);
      });
    }
  }]);
  return ItemImage;
}();
exports.ItemImage = ItemImage;