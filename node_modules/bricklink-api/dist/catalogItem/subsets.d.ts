/**
 * Represents a subset entry.
 */
export class SubsetEntry {
    /**
     * Create an instance of a subset entry
     * @param {object} [data] The API response data
     * @param {object} [data.item] Item information
     * @param {number} [data.color_id] The color id of the entry item.
     * @param {number} [data.quantity] The number of items in the subset entry.
     * @param {number} [data.extra_quantity] The number of extra items included in the subset.
     * @param {boolean} [data.is_alternate] Indicator that the item is an alternate.
     */
    constructor(data?: {
        item?: object;
        color_id?: number;
        quantity?: number;
        extra_quantity?: number;
        is_alternate?: boolean;
    });
    /** @type {CatalogItem} */
    item: CatalogItem;
    /** @type {number} */
    color_id: number;
    /** @type {number} */
    quantity: number;
    /** @type {number} */
    extra_quantity: number;
    /** @type {boolean} */
    is_alternate: boolean;
}
/**
 * Represents a subset item. A subset item can have more than one matching entry due to alternate parts.
 */
export class Subset {
    /**
     * Method to get a subset of a catalog item.
     *
     * Usage:
     *
     * ```
     * var req = Subset.get(ItemType.Set, '6020-1', {break_minifigs: true});
     * client.send(req).then(subset => console.log(subset));
     * ```
     *
     * @param {string} itemType Catalog item type
     * @param {string} itemNumber Catalog item number
     * @param {object} options Options that conform to {@link SubsetOptions}.
     */
    static get(itemType: string, itemNumber: string, options: object): BricklinkRequest;
    /**
     * Create an instance of a subset item.
     * @param {object} [data] The response data from API request.
     * @param {number} [data.match_no] The number of matching entries or 0 if there is no matching of alternative item.
     * @param {object} [data.entries] The specific entries for the subset item.
     */
    constructor(data?: {
        match_no?: number;
        entries?: object;
    });
    /** @type {number} */
    match_no: number;
    /** @type {SubsetEntry[]} */
    entries: SubsetEntry[];
}
/**
 * Options that can be used when make a request for a subset.
 */
export class SubsetOptions extends RequestParams {
    /**
     * Make an instance of SubsetOptions.
     * @param {object} [data] Raw options object.
     * @param {number} [data.color_id] The color of the item(This value is valid only for {@link ItemType}.Part.
     * @param {boolean} [data.box] Indicates whether the set includes the original box
     * @param {boolean} [data.instruction] Indicates whether the set includes the original instruction
     * @param {boolean} [data.break_minifigs]	Indicates whether the result breaks down minifigs as parts
     * @param {boolean} [data.break_subsets] Indicates whether the result breaks down sets in set
     */
    constructor(data?: {
        color_id?: number;
        box?: boolean;
        instruction?: boolean;
        break_minifigs?: boolean;
        break_subsets?: boolean;
    });
    /** @type {number|null} */
    color_id: number | null;
    /** @type {boolean|null} */
    box: boolean | null;
    /** @type {boolean|null} */
    instruction: boolean | null;
    /** @type {boolean|null} */
    break_minifigs: boolean | null;
    /** @type {boolean|null} */
    break_subsets: boolean | null;
}
import { CatalogItem } from "./catalogItem";
import { BricklinkRequest } from "../request";
import { RequestParams } from "../request";
