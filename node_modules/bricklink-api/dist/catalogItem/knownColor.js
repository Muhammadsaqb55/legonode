"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KnownColor = void 0;
var _request = require("../request");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * Represents a known color object.
 */
var KnownColor = /*#__PURE__*/function () {
  /**
   * Create a new instance of a known color
   * @param {object} [data] API response data.
   * @param {number} [data.color_id=0] The color id.
   * @param {number} [data.quantity=0] The quantity of items with this known color.
   */
  function KnownColor(data) {
    _classCallCheck(this, KnownColor);
    data = data || {};
    /** @type {number} */
    this.color_id = data.color_id || 0;
    /** @type {number} */
    this.quantity = data.quantity || 0;
  }

  /**
   * Method to get a list of known color_id for a given catalog item.
   *
   * Usage:
   *
   * ```
   * var req = KnownColor.get(ItemType.Part, '3001');
   * client.send(req).then(colors => console.log(colors));
   * ```
   *
   * @param {string} itemType Catalog item type
   * @param {string} itemNumber Catalog item number
   * @return {BricklinkRequest} A request that resolves to a list of {@link KnownColor}.
   */
  _createClass(KnownColor, null, [{
    key: "get",
    value: function get(itemType, itemNumber) {
      var method = _request.BricklinkRequest.GET;
      var uri = "/items/".concat(itemType, "/").concat(itemNumber, "/colors");
      return new _request.BricklinkRequest(method, uri, null, function (data) {
        return data.map(function (color) {
          return new KnownColor(color);
        });
      });
    }
  }]);
  return KnownColor;
}();
exports.KnownColor = KnownColor;