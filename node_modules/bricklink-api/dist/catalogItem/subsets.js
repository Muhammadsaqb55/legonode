"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SubsetOptions = exports.SubsetEntry = exports.Subset = void 0;
var _request = require("../request");
var _catalogItem = require("./catalogItem");
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
/**
 * Represents a subset entry.
 */
var SubsetEntry = /*#__PURE__*/_createClass(
/**
 * Create an instance of a subset entry
 * @param {object} [data] The API response data
 * @param {object} [data.item] Item information
 * @param {number} [data.color_id] The color id of the entry item.
 * @param {number} [data.quantity] The number of items in the subset entry.
 * @param {number} [data.extra_quantity] The number of extra items included in the subset.
 * @param {boolean} [data.is_alternate] Indicator that the item is an alternate.
 */
function SubsetEntry(data) {
  _classCallCheck(this, SubsetEntry);
  data = data || {};
  /** @type {CatalogItem} */
  this.item = data.item ? new _catalogItem.CatalogItem(data.item) : new _catalogItem.CatalogItem();
  /** @type {number} */
  this.color_id = data.color_id || 0;
  /** @type {number} */
  this.quantity = data.quantity || 0;
  /** @type {number} */
  this.extra_quantity = data.extra_quantity || 0;
  /** @type {boolean} */
  this.is_alternate = data.is_alternate || false;
});
/**
 * Represents a subset item. A subset item can have more than one matching entry due to alternate parts.
 */
exports.SubsetEntry = SubsetEntry;
var Subset = /*#__PURE__*/function () {
  /**
   * Create an instance of a subset item.
   * @param {object} [data] The response data from API request.
   * @param {number} [data.match_no] The number of matching entries or 0 if there is no matching of alternative item.
   * @param {object} [data.entries] The specific entries for the subset item.
   */
  function Subset(data) {
    _classCallCheck(this, Subset);
    data = data || {};
    /** @type {number} */
    this.match_no = data.match_no || 0;
    var entries = data.entries || [];
    /** @type {SubsetEntry[]} */
    this.entries = entries.map(function (e) {
      return new SubsetEntry(e);
    });
  }
  /**
   * Method to get a subset of a catalog item.
   *
   * Usage:
   *
   * ```
   * var req = Subset.get(ItemType.Set, '6020-1', {break_minifigs: true});
   * client.send(req).then(subset => console.log(subset));
   * ```
   *
   * @param {string} itemType Catalog item type
   * @param {string} itemNumber Catalog item number
   * @param {object} options Options that conform to {@link SubsetOptions}.
   */
  _createClass(Subset, null, [{
    key: "get",
    value: function get(itemType, itemNumber, options) {
      var method = _request.BricklinkRequest.GET;
      options = options ? new SubsetOptions(options) : new SubsetOptions();
      var uri = "/items/".concat(itemType, "/").concat(itemNumber, "/subsets");
      return new _request.BricklinkRequest(method, uri, options, function (data) {
        return data.map(function (e) {
          return new Subset(e);
        });
      });
    }
  }]);
  return Subset;
}();
/**
 * Options that can be used when make a request for a subset.
 */
exports.Subset = Subset;
var SubsetOptions = /*#__PURE__*/function (_RequestParams) {
  _inherits(SubsetOptions, _RequestParams);
  var _super = _createSuper(SubsetOptions);
  /**
   * Make an instance of SubsetOptions.
   * @param {object} [data] Raw options object.
   * @param {number} [data.color_id] The color of the item(This value is valid only for {@link ItemType}.Part.
   * @param {boolean} [data.box] Indicates whether the set includes the original box
   * @param {boolean} [data.instruction] Indicates whether the set includes the original instruction
   * @param {boolean} [data.break_minifigs]	Indicates whether the result breaks down minifigs as parts
   * @param {boolean} [data.break_subsets] Indicates whether the result breaks down sets in set
   */
  function SubsetOptions(data) {
    var _this;
    _classCallCheck(this, SubsetOptions);
    _this = _super.call(this);
    data = data || {};
    /** @type {number|null} */
    _this.color_id = data.color_id || null;
    /** @type {boolean|null} */
    _this.box = data.box || null;
    /** @type {boolean|null} */
    _this.instruction = data.instruction || null;
    /** @type {boolean|null} */
    _this.break_minifigs = data.break_minifigs || null;
    /** @type {boolean|null} */
    _this.break_subsets = data.break_subsets || null;
    return _this;
  }
  return _createClass(SubsetOptions);
}(_request.RequestParams);
exports.SubsetOptions = SubsetOptions;