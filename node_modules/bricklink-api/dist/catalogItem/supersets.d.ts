/**
 * Represents entries of a superset item.
 */
export class SupersetEntry {
    /**
     * Create an instance of a subset entry
     * @param {object} [data] The API response data
     * @param {object} [data.item] Item information
     * @param {number} [data.quantity] The number of items in the subset entry.
     * @param {string} [data.appear_as] How the entry appears in the superset item.
     */
    constructor(data?: {
        item?: object;
        quantity?: number;
        appear_as?: string;
    });
    /** @type {CatalogItem} */
    item: CatalogItem;
    /** @type {number} */
    quantity: number;
    /** @type {string} */
    appear_as: string;
}
/**
 * Represents a super set entry.
 */
export class Superset {
    /**
     * Method to get a superset of a catalog item
     *
     * Usage:
     *
     * ```
     * var req = Superset.get(ItemType.Part, '4593');
     * client.send(req).then(superset => console.log(superset));
     * ```
     *
     * @param {string} itemType Catalog item type
     * @param {string} itemNumber Catalog item number
     * @param {object} options Options that conform to {@link SupersetOptions}.
     * @return {BricklinkRequest} A request that will return an array of {@link Superset} items.
     */
    static get(itemType: string, itemNumber: string, options: object): BricklinkRequest;
    /**
     * Create an instance of a super set item.
     * @param {object} [data] The API response data
     * @param {object[]} [data.entries] Entries for a superset item.
     * @param {number} [data.color_id] The color id of the superset item.
     */
    constructor(data?: {
        entries?: object[];
        color_id?: number;
    });
    /** @type {number} */
    color_id: number;
    /** @type {SupersetEntry[]} */
    entries: SupersetEntry[];
}
/**
 * Options that can be used when make a request for a subset.
 */
export class SupersetOptions extends RequestParams {
    /**
     * Make an instance of SubsetOptions.
     * @param {object} [data] Raw options object.
     * @param {number} [data.color_id] The color of the item.
     */
    constructor(data?: {
        color_id?: number;
    });
    /** @type {number|null} */
    color_id: number | null;
}
import { CatalogItem } from "./catalogItem";
import { BricklinkRequest } from "../request";
import { RequestParams } from "../request";
