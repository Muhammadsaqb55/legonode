"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Color = void 0;
var _request = require("../request");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * Represents a color object
 */
var Color = /*#__PURE__*/function () {
  /**
   * Create a new instance of a color
   * @param {object} [data] API response data.
   * @param {number} [data.color_id=0] The color id. i.e. - 10
   * @param {string} [data.color_name] The color name. i.e. - Dark Gray
   * @param {string} [data.color_code] The HTML HEX associated to the color. i.e. - 6b5a5a
   * @param {string} [data.color_type] A group that the color belongs to. i.e. - Solid, Transparent, etc...
   */
  function Color(data) {
    _classCallCheck(this, Color);
    data = data || {};
    /** @type {number} */
    this.color_id = data.color_id || 0;
    /** @type {string} */
    this.color_name = data.color_name || '';
    /** @type {string} */
    this.color_code = data.color_code || '';
    /** @type {string} */
    this.color_type = data.color_type || '';
  }

  /**
   * Method to get specific color details
   *
   * Usage:
   *
   * ```
   * var req = Color.get(10);
   * client.send(req).then(color => console.log(color));
   * ```
   *
   * @param {number} colorId a color id.
   * @return {BricklinkRequest} A request that resolves to a {@link Color} instance.
   */
  _createClass(Color, null, [{
    key: "get",
    value: function get(colorId) {
      var method = _request.BricklinkRequest.GET;
      var uri = "/colors/".concat(colorId);
      return new _request.BricklinkRequest(method, uri, null, function (data) {
        return new Color(data);
      });
    }

    /**
     * Get a list of all colors
     *
     * Usage:
     *
     * ```
     * var req = Color.all();
     * client.send(req).then(colors => console.log(colors));
     * ```
     *
     * @return {BricklinkRequest} A request that resolves to an array of {@link Color}.
     */
  }, {
    key: "all",
    value: function all() {
      var method = _request.BricklinkRequest.GET;
      var uri = "/colors";
      return new _request.BricklinkRequest(method, uri, null, function (data) {
        return data.map(function (d) {
          return new Color(d);
        });
      });
    }
  }]);
  return Color;
}();
exports.Color = Color;