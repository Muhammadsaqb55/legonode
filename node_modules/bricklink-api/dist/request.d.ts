/**
 * Creates a request to use with the client.
 */
export class BricklinkRequest {
    /** @type {string} */
    static get GET(): string;
    /** @type {string} */
    static get PUT(): string;
    /** @type {string} */
    static get POST(): string;
    /** @type {string} */
    static get DELETE(): string;
    /**
     * Create a new request.
     * @param {string} method The type of HTTP request to perform.
     * @param {string} uri The relative of full path uri of a request to perform. This should not include any query parameters.
     * @param {RequestParams} [params] Additional parameters to include with the request in either post body or query params.
     * @param {BricklinkRequestCallback} [callback=null] A callback function to perform after the request has been successfully performed.
     */
    constructor(method: string, uri: string, params?: RequestParams, callback?: BricklinkRequestCallback);
    /** @type {string} */
    method: string;
    /** @type {string} */
    uri: string;
    /** @type {RequestParams} */
    params: RequestParams;
    /** @type {BricklinkRequestCallback|null} */
    callback: BricklinkRequestCallback | null;
}
/**
 * @callback BricklinkRequestCallback
 * @param {any} value
 * @returns {any}
 */
/**
 * Represents any query parameters to use with a request.
 */
export class RequestParams {
    /**
     * Convert params for the request to a query string.
     * @return {string} parameters in the format of '?<param>=<value>'.
     */
    toQueryString(): string;
    /**
     * Convert params for the request to a an object.
     * @return {object} trimmed down parameters object.
     */
    toObject(): object;
}
export type BricklinkRequestCallback = (value: any) => any;
