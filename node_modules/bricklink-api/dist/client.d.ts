/**
 * Create a client to perform
 */
export class Client {
    /**
     * Create an instance of the Bricklin Node Client.
     * @param {object} [options] Options that are used to create a new client.
     * @param {string} [options.token] The `TokenValue` from {@link https://www.bricklink.com/v2/api/register_consumer.page}
     * @param {string} [options.token_secret] The `TokenSecret` from {@link https://www.bricklink.com/v2/api/register_consumer.page}
     * @param {string} [options.consumer_key] The `ConsumerKey` from {@link https://www.bricklink.com/v2/api/register_consumer.page}
     * @param {string} [options.consumer_secret] The `ConsumerSecret` from {@link https://www.bricklink.com/v2/api/register_consumer.page}
     * @param {string} [options.endpoint='https://api.bricklink.com/api/store/v1/'] The url of the Bricklink API.
     */
    constructor(options?: {
        token?: string;
        token_secret?: string;
        consumer_key?: string;
        consumer_secret?: string;
        endpoint?: string;
    });
    /** @type {string} */
    token: string;
    /** @type {string} */
    token_secret: string;
    /** @type {string} */
    consumer_key: string;
    /** @type {string} */
    consumer_secret: string;
    /** @type {string} */
    endpoint: string;
    /** @type {Function[]} */
    requestQueue: Function[];
    /**
     * Performs a concurrent-safe bricklink request and the callback upon success.
     * @param {BricklinkRequest} req The request to perform.
     * @return {Promise} The data that has been return from the API request and any callbacks.
     */
    send(req: BricklinkRequest): Promise<any>;
    /**
     * Performs a bricklink request and the callback upon success.
     * @param {BricklinkRequest} req The request to perform.
     * @return {Promise} The data that has been return from the API request and any callbacks.
     */
    dispatch(req: BricklinkRequest): Promise<any>;
    /**
     * Get a catalog item by type and identification number.
     * @param {string} itemType An item type as can be foud at {@link ItemType}.
     * @param {string} itemNumber An item identification number.
     * @return {Promise<CatalogItem>} A promise that resolves to a catalog item.
     */
    getCatalogItem(itemType: string, itemNumber: string): Promise<CatalogItem>;
    /**
     * Get the price guide for a given catalog item.
     * @param {string} itemType An item type as can be foud at {@link ItemType}.
     * @param {string} itemNumber An item identification number.
     * @param {object} params Options for the price guide as outlined in {@link PriceGuideOptions}.
     * @return {Promise<PriceGuide>} A promise that resolves to a price guide.
     */
    getPriceGuide(itemType: string, itemNumber: string, params: object): Promise<PriceGuide>;
    /**
     * Get known colors for a catalog item.
     * @param {string} itemType An item type as can be foud at {@link ItemType}.
     * @param {string} itemNumber An item identification number.
     * @return {Promise<Array>} A promise that resolves to a list of {@link KnownColor}.
     */
    getKnownColors(itemType: string, itemNumber: string): Promise<any[]>;
    /**
     * Can get an image for a specific image color of a known catalog item.
     * @param {string} itemType An item type as can be foud at {@link ItemType}.
     * @param {string} itemNumber An item identification number.
     * @param {number} colorId The color id of the item.
     * @return {Promise<ItemImage>} A promise that resolves to an Item Image.
     */
    getItemImage(itemType: string, itemNumber: string, colorId: number): Promise<ItemImage>;
    /**
     * Gets a subset of a catalog item.
     * @param {string} itemType An item type as can be foud at {@link ItemType}.
     * @param {string} itemNumber An item identification number.
     * @param {object} [params] Options for the price guide as outlined in {@link SubsetOptions}.
     * @return {Promise<Array>} A promise that resolves to a  list of {@link Subset}.
     */
    getItemSubset(itemType: string, itemNumber: string, params?: object): Promise<any[]>;
    /**
     * Gets a superset of a catalog item.
     * @param {string} itemType An item type as can be foud at {@link ItemType}.
     * @param {string} itemNumber An item identification number.
     * @param {object} [params] Options for the price guide as outlined in {@link SupersetOptions}.
     * @return {Promise<Array>} A promise that resolves to a  list of {@link Superset}.
     */
    getItemSuperset(itemType: string, itemNumber: string, params?: object): Promise<any[]>;
}
import { BricklinkRequest } from "./request";
import { CatalogItem } from "./catalogItem/catalogItem";
import { PriceGuide } from "./catalogItem/priceGuide";
import { ItemImage } from "./catalogItem/itemImage";
