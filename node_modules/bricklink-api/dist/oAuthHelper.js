"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OAuthHelper = void 0;
var _oauthSignature = _interopRequireDefault(require("oauth-signature"));
var _crypto = require("crypto");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * A helper for OAuth 1.0 header information and signing keys.
 */
var OAuthHelper = /*#__PURE__*/function () {
  /**
   * Intialize the helper
   * @param {string} consumerKey The consumer key
   * @param {string} token The token value
   */
  function OAuthHelper(consumerKey, token) {
    _classCallCheck(this, OAuthHelper);
    /** @type {string} */
    this.consumerKey = consumerKey;
    /** @type {string} */
    this.token = token;
    /** @type {string} */
    this.nonce = (0, _crypto.randomBytes)(16).toString('hex');
    /** @type {string} */
    this.signature = '';
    /** @type {string} */
    this.timestamp = Math.round(Date.now() / 1000).toString();
  }
  _createClass(OAuthHelper, [{
    key: "parameters",
    get: function get() {
      return {
        oauth_consumer_key: this.consumerKey,
        oauth_token: this.token,
        oauth_nonce: this.nonce,
        oauth_timestamp: this.timestamp,
        oauth_signature_method: 'HMAC-SHA1',
        oauth_version: '1.0'
      };
    }
  }, {
    key: "header",
    get: function get() {
      var str = 'OAuth ';
      var params = Object.assign({
        realm: ''
      }, this.parameters);
      params['oauth_signature'] = this.signature;
      var keys = Object.keys(params);
      var pairs = keys.map(function (k) {
        return k + '="' + params[k] + '"';
      });
      str += pairs.join(',');
      return str;
    }
  }, {
    key: "queryString",
    get: function get() {
      var params = Object.assign({}, this.parameters);
      params['oauth_signature'] = this.signature;
      var str = JSON.stringify(params);
      return 'Authorization=' + str;
    }

    /**
     * Sign the request with oath headers and sets the signature member of the OauthHelper instance.
     */
  }, {
    key: "sign",
    value: function sign(url, request, consumerSecret, tokenSecret) {
      var params = Object.assign({}, this.parameters, request.params.toObject());
      this.signature = _oauthSignature["default"].generate(request.method, url, params, consumerSecret, tokenSecret);
    }
  }]);
  return OAuthHelper;
}();
exports.OAuthHelper = OAuthHelper;