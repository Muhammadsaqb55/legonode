"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RequestParams = exports.BricklinkRequest = void 0;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * Creates a request to use with the client.
 */
var BricklinkRequest = /*#__PURE__*/function () {
  /**
   * Create a new request.
   * @param {string} method The type of HTTP request to perform.
   * @param {string} uri The relative of full path uri of a request to perform. This should not include any query parameters.
   * @param {RequestParams} [params] Additional parameters to include with the request in either post body or query params.
   * @param {BricklinkRequestCallback} [callback=null] A callback function to perform after the request has been successfully performed.
   */
  function BricklinkRequest(method, uri, params, callback) {
    _classCallCheck(this, BricklinkRequest);
    /** @type {string} */
    this.method = method;
    /** @type {string} */
    this.uri = uri;
    /** @type {RequestParams} */
    this.params = params || new RequestParams();
    /** @type {BricklinkRequestCallback|null} */
    this.callback = callback || null;
  }
  /** @type {string} */
  _createClass(BricklinkRequest, null, [{
    key: "GET",
    get: function get() {
      return 'get';
    }

    /** @type {string} */
  }, {
    key: "PUT",
    get: function get() {
      return 'put';
    }

    /** @type {string} */
  }, {
    key: "POST",
    get: function get() {
      return 'post';
    }

    /** @type {string} */
  }, {
    key: "DELETE",
    get: function get() {
      return 'put';
    }
  }]);
  return BricklinkRequest;
}();
/**
 * @callback BricklinkRequestCallback
 * @param {any} value
 * @returns {any}
 */
/**
 * Represents any query parameters to use with a request.
 */
exports.BricklinkRequest = BricklinkRequest;
var RequestParams = /*#__PURE__*/function () {
  function RequestParams() {
    _classCallCheck(this, RequestParams);
  }
  _createClass(RequestParams, [{
    key: "toQueryString",
    value:
    /**
     * Convert params for the request to a query string.
     * @return {string} parameters in the format of '?<param>=<value>'.
     */
    function toQueryString() {
      var pairs = [];
      for (var member in this) {
        if (this[member] != null) {
          pairs.push(member + '=' + this[member]);
        }
      }
      if (pairs.length > 0) {
        return '?' + pairs.join('&');
      }
      return '';
    }

    /**
     * Convert params for the request to a an object.
     * @return {object} trimmed down parameters object.
     */
  }, {
    key: "toObject",
    value: function toObject() {
      /** @type {object} */
      var params = {};
      for (var member in this) {
        if (this[member] != null) {
          params[member] = this[member];
        }
      }
      return params;
    }
  }]);
  return RequestParams;
}();
exports.RequestParams = RequestParams;